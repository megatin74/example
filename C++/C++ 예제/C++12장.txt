/*
	IntroTemplete1.cpp
*/
#include<iostream>
using std::endl;
using std::cout;

template<typename T>
T Add(T a, T b)
{
	return a+b;
}

int main(void)
{
	cout<<Add(10,20)<<endl;
	cout<<Add(1.1,2.2)<<endl;

	return 0;
}


/*
	IntroTemplete2.cpp
*/
#include<iostream>
using std::endl;
using std::cout;

template<typename T>
void ShowData(T a, T b)
{
	cout<<a<<endl;
	cout<<b<<endl;
}

int main(void)
{
	ShowData(1,2);
	ShowData(3,2.5);

	return 0;
}


/*
	IntroTemplete3.cpp
*/
#include<iostream>
using std::endl;
using std::cout;

template<typename T1, typename T2>	//함수 템플릿 정의
void ShowData(T1 a, T2 b)
{
	cout<<a<<endl;
	cout<<b<<endl;
}

int main(void)
{
	ShowData(1,2);
	ShowData(3,2.5);

	return 0;
}
/*
	SpeciFuncTemplate3.cpp
*/
#include<iostream>
using std::endl;
using std::cout;

template<typename T>	//함수 템플릿 정의
int SizeOf(T a)
{
	return sizeof(a);	//return strlen(a);
}
template<>	//함수 템플릿 특수화 선언!
int SizeOf(char* a)
{
	return strlen(a);
}

int main(void)
{
	int i=10;
	double e=7.7;
	char* str="Good morning";

	cout<<SizeOf(i)<<endl;
	cout<<SizeOf(e)<<endl;
	cout<<SizeOf(str)<<endl;

	return 0;
}

/*
	SpeciFuncTemplate1.cpp
*/
#include<iostream>
using std::endl;
using std::cout;

template<typename T>	//함수 템플릿 정의
int SizeOf(T a)
{
	return sizeof(a);	//return strlen(a);
}

int main(void)
{
	int i=10;
	double e=7.7;
	char* str="Good morning";

	cout<<SizeOf(i)<<endl;
	cout<<SizeOf(e)<<endl;
	cout<<SizeOf(str)<<endl;

	return 0;
}


/*
	SpeciFuncTemplate2.cpp
*/
#include<iostream>
using std::endl;
using std::cout;

template<typename T>	//함수 템플릿 정의
int SizeOf(T a)
{
	return sizeof(a);	//return strlen(a);
}
template<>	//함수 템플릿 특수화 선언!
int SizeOf(char* a)
{
	return strlen(a);
}

int main(void)
{
	int i=10;
	double e=7.7;
	char* str="Good morning";

	cout<<SizeOf(i)<<endl;
	cout<<SizeOf(e)<<endl;
	cout<<SizeOf(str)<<endl;

	return 0;
}



/*
	DataTemplate1.cpp
*/
#include<iostream>
using std::endl;
using std::cout;

class Data
{
	int data;
public:
	Data(int d){
		data=d;
	}
	void SetData(int d){
		data=d;
	}
	int GetData(){
		return data;
	}
};

int main(void)
{
	Data d1(0);
	d1.SetData(10);
	Data d2(100);

	cout<<d1.GetData()<<endl;
	cout<<d2.GetData()<<endl;

	return 0;
}


/*
	DataTemplate3.cpp
*/
#include<iostream>
using std::endl;
using std::cout;

template<typename T>
class Data
{
	T data;
public:
	Data(T d);
	void SetData(T d);
	T GetData();
};
template<typename T>
Data<T>::Data(T d){
	data=d;
}
template<typename T>	//아래의 T가 무엇인지를 설명
void Data<T>::SetData(T d){	//Data<T> : 클래스 템플릿의 타입
	data=d;
}
template<typename T>
T Data<T>::GetData(){
	return data;
}


int main(void)
{
	Data<int> d1(0);
	d1.SetData(10);
	Data<int> d2(100);

	cout<<d1.GetData()<<endl;
	cout<<d2.GetData()<<endl;

	return 0;
}



/*
	StackTemplate1.cpp
*/
#include<iostream>
using std::endl;
using std::cout;

class Stack{
private:
	int topIdx;	//마지막 입력된 위치의 인덱스
	char* stackPtr;	//스택 포인터
public:
	Stack(int s=10);
	~Stack();
	void Push(const char& pushValue);
	char Pop();
};

Stack::Stack(int len){
	topIdx=-1;	//스택 인덱스 초기화
	stackPtr=new char[len];
}
Stack::~Stack(){
	delete[] stackPtr;
}
void Stack::Push(const char& pushValue){	//스택에 데이터 입력
	stackPtr[++topIdx]=pushValue;
}
char Stack::Pop(){	//스택에서 데이터 꺼냄
	return stackPtr[topIdx--];
}

int main()
{
	Stack stack(10);
	stack.Push('A');
	stack.Push('B');
	stack.Push('C');

	for(int i=0;i<3;i++){
		cout<<stack.Pop()<<endl;
	}

	return 0;
}



/*
	StackTemplate2.cpp
*/
#include<iostream>
using std::endl;
using std::cout;

template<typename T>
class Stack{
private:
	int topIdx;	//마지막 입력된 위치의 인덱스
	T* stackPtr;	//스택 포인터
public:
	Stack(int s=10);
	~Stack();
	void Push(const T& pushValue);
	T Pop();
};

template<typename T>
Stack<T>::Stack(int len){
	topIdx=-1;	//스택 인덱스 초기화
	stackPtr=new T[len];
}
template<typename T>
Stack<T>::~Stack(){
	delete[] stackPtr;
}
template<typename T>
void Stack<T>::Push(const T& pushValue){	//스택에 데이터 입력
	stackPtr[++topIdx]=pushValue;
}
template<typename T>
T Stack<T>::Pop(){	//스택에서 데이터 꺼냄
	return stackPtr[topIdx--];
}

int main()
{
	Stack<char> stack(10);
	stack.Push('A');
	stack.Push('B');
	stack.Push('C');

	for(int i=0;i<3;i++){
		cout<<stack.Pop()<<endl;
	}

	Stack<int> stack2(10);
	stack2.Push(10);
	stack2.Push(20);
	stack2.Push(30);

	for(int j=0;j<3;j++){
		cout<<stack2.Pop()<<endl;
	}

	return 0;
}


