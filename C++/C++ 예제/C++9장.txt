/*
	UnderObj1.cpp
*/
#include<iostream>
using std::cout;
using std::endl;

class Data
{
	int data;
public:
	Data(int num){
		data=num;
	}
	void ShowData(){
		cout<<"Data : "<<data<<endl;
	}
	void Add(int num){
		data+=num;
	}
};

int main(void)
{
	Data ddd(10);
	ddd.Add(10);
	ddd.ShowData();

	return 0;
}



/*
	UnderObj2.cpp
*/
#include<iostream>
using std::cout;
using std::endl;

/***** 클래스 Data를 흉내낸 영역 *********/
struct Data
{
	int data;
	void (*ShowData)(Data*);
	void (*Add)(Data*, int);
};

void ShowData(Data* THIS){
	cout<<"Data: "<<THIS->data<<endl;
}
void Add(Data* THIS, int num){
	THIS->data+=num;
}

/***** 적절히 변경된 main 함수 *********/
int main (void)
{
	//Data ddd1(10);
	Data ddd1={10,ShowData,Add};

	//ddd1.Add(10);
	ddd1.Add(&ddd1,10);

	//ddd1.ShowData();
	ddd1.ShowData(&ddd1);

	Data ddd2={1,ShowData, Add};
	ddd2.Add(&ddd2, 1);
	ddd2.ShowData(&ddd2);

	return 0;
}


/*
	OverInternal1.cpp
*/
#include<iostream>
using std::cout;
using std::endl;

class A
{
	int a;
	int b;
public:
	virtual void fct1(){cout<<"fct1(...)"<<endl;}
	virtual void fct2(){cout<<"fct2(...)"<<endl;}
};

class B :public A
{
	int c;
	int d;
public:
	virtual void fct1(){cout<<"overriding fct1(...)"<<endl;}
	void fct3(){cout<<"fct3(...)"<<endl;}
};

int main(void)
{
	A* aaa=new A();
	aaa->fct1();

	B* bbb=new B();
	bbb->fct1();

	return 0;
}


/*
	multi_inheri1.cpp
*/
#include<iostream>
using std::cout;
using std::endl;

class AAA{
public:
	void String1(){
		cout<<"AAA::String1"<<endl;
	}
};

class BBB{
public:
	void String2(){
		cout<<"BBB::String2"<<endl;
	}
};

class CCC :public AAA, public BBB{
public:
	void ShowString(){
		String1();
		String2();
	}
};

int main(void)
{
	CCC ccc;
	ccc.ShowString();

	return 0;
}


/*
	multi_inheri2.cpp
*/
#include<iostream>
using std::cout;
using std::endl;

class AAA{
public:
	void String(){
		cout<<"AAA::String"<<endl;
	}
};

class BBB{
public:
	void String(){
		cout<<"BBB::String"<<endl;
	}
};

class CCC :public AAA, public BBB{
public:
	void ShowString(){
		String();	//AAA::String();로 변경해야 컴파일 가능
		String();	//BBB::String();로 변경해야 컴파일 가능
	}
};

int main(void)
{
	CCC ccc;
	ccc.ShowString();

	return 0;
}


/*
	multi_inheri3~4.cpp
*/
#include<iostream>
using std::cout;
using std::endl;

class AAA{
public:
	void String1(){
		cout<<"AAA::String"<<endl;
	}
};

class BBB :virtual public AAA{
public:
	void String2(){
		cout<<"BBB::String"<<endl;
	}
};

class CCC :virtual public AAA{
public:
	void String3(){
		cout<<"CCC::String"<<endl;
	}
};

class DDD :public BBB, public CCC{
public:
	void ShowString(){
		String1();	//AAA 클래스의 String1
		String2();	//BBB 클래스의 String2
		String3();	//CCC 클래스의 String3
	}
};

int main(void)
{
	DDD ddd;
	ddd.ShowString();

	return 0;
}
