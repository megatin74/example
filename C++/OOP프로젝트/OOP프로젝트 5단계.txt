/*
	OOP_PROJECT 5단계
	main.cpp
*/
#include "Account.h"
#include "AccManager.h"
enum{MAKE=1, DEPOSIT, WITHDRAW, INQUIRE, EXIT};

int main(void)
{
	AccManager AccSel;
	int select;

	while(1)
	{
		AccSel.PrintMenu();
		cout<<"선택할 기능(1~5) : "; cin>>select;

		if(select==MAKE)
			AccSel.MakeAccount();
		else if(select==DEPOSIT)
			AccSel.Deposit();
		else if(select==WITHDRAW)
			AccSel.Withdraw();
		else if(select==INQUIRE)
			AccSel.Inquire();
		else if(select==EXIT)
			return 0;
		else
			cout<<"선택을 잘못하셨습니다."<<endl;
	}
}				


/*
	Account.h
*/
#ifndef _COUNT_H_
#define _COUNT_H_ 20

#include<iostream>
using std::cout;
using std::cin;
using std::endl;

#define SIZE 20
#define _DEBUG_ 1	//시험용
//#define _DEBUG_ 2	//정식용
#endif

class Account{
	int id;	//계좌
	char* name;	//이름
	int balance;	//잔액
public:
	Account(){};
	Account(int id, char* name, int balance);
	Account(const Account& account);
	~Account();

	int GetID() const;	//계좌전달
	const char* GetName() const;	//이름전달
	int GetBalance() const;	//잔액전달

	void AddBalance(int add);	//입금완료
	void MinBalance(int min);	//출금완료
	void ShowAllData();
};
/*
	Account.cpp
*/
#include "Account.h"

Account::Account(int id, char* name, int balance)
{
	this->id=id;

	this->name=new char[strlen(name)+1];
#if _DEBUG_==1
	if(this->name==NULL)
	{
		cout<<"메모리 할당 실패"<<endl;
		exit(1);
	}
#endif
	strcpy(this->name,name);

	this->balance=balance;
}
Account::Account(const Account& account)
{
	id=account.id;

	name=new char[strlen(account.name)+1];
#if _DEBUG_==1
	if(this->name==NULL)
	{
		cout<<"메모리 할당 실패"<<endl;
		exit(1);
	}
#endif
	strcpy(name,account.name);

	balance=account.balance;
}
Account::~Account()
{
	delete[] name;	//delete this;
}
int Account::GetID() const	//계좌전달
{
	return id;
}
const char* Account::GetName() const	//이름전달
{
	return name;
}
int Account::GetBalance() const	//잔액전달
{
	return balance;
}
void Account::AddBalance(int add)	//잔액입금
{
	balance+=add;
	cout<<"입금이 완료되었습니다."<<endl;
}
void Account::MinBalance(int min)	//잔액출금
{
	balance-=min;
	cout<<"출금이 완료되었습니다."<<endl;
}
void Account::ShowAllData()
{
	cout<<"계좌번호 : "<<id<<endl;
	cout<<"성    함 : "<<name<<endl;
	cout<<"잔    액 : "<<balance<<endl;
	cout<<endl;
}



/*
	AccManager.h
*/
#ifndef _COUNT_H_
#define _COUNT_H_ 20

#include<iostream>
using std::cout;
using std::cin;
using std::endl;

#define SIZE 20
#define _DEBUG_ 1	//시험용
//#define _DEBUG_ 2	//정식용
#endif

class AccManager
{
private:
	Account* pAccount[100];
	int count;
public:
	AccManager(){count=0;}
	~AccManager(){}	//delete 해야되지 않나?
					//1

	void PrintMenu();	//목록출력
	void MakeAccount();	//계좌개설
	void Deposit();	//입금
	void Withdraw();	//출금
	void Inquire();	//잔액조회
};

/*
	AccManager.cpp
*/
#include "Account.h"
#include "AccManager.h"

void AccManager::PrintMenu()	//목록출력
{
	cout<<"***** 메뉴 목록 *****"<<endl;
	cout<<"기능 1. 계좌 개설"<<endl;
	cout<<"기능 2. 입     금"<<endl;
	cout<<"기능 3. 출     금"<<endl;
	cout<<"기능 4. 전체 고객 잔액 조회"<<endl;
	cout<<"기능 5. 종     료"<<endl;
}

void AccManager::MakeAccount()	//계좌개설
{
	char name[SIZE];
	int id;
	int balance;

	cout<<"***** 계좌 개설 *****"<<endl;
	cout<<"성    함 : ";	cin>>name;
	cout<<"계좌번호 : ";	cin>>id;
	cout<<"입금금액 : ";    cin>>balance;
	cout<<endl;

	pAccount[count]=new Account(id,name,balance);
#if _DEBUG_==1
	if(pAccount[count]==NULL)
	{
		cout<<"메모리 할당 실패"<<endl;
		exit(1);
	}
#endif
	count++;
}
void AccManager::Deposit()	//입금
{
	int find;
	int i;	//for문
	cout<<"***** 계좌 입금 *****"<<endl;
	cout<<"입금할 계좌번호 : ";
	cin>>find;

	for(i=0;i<count;i++)
	{
		if(find==pAccount[i]->GetID())
		{
			int add;
			cout<<"성    함 : "<<pAccount[i]->GetName()<<endl;
			cout<<"입금할 금액 : ";	cin>>add;
			pAccount[i]->AddBalance(add);
			cout<<"잔    액 : "<<pAccount[i]->GetBalance()<<endl;
			cout<<endl;
			return;
		}
	}
	cout<<"잘못된 계좌번호를 입력하셨습니다."<<endl;
	cout<<endl;
}

void AccManager::Withdraw()	//출금
{
	int find;
	int i;	//for문
	cout<<"***** 계좌 출금 *****"<<endl;
	cout<<"출금할 계좌번호 : ";
	cin>>find;

	for(i=0;i<count;i++)
	{
		if(find==pAccount[i]->GetID())
		{
			int min;
			cout<<"성    함 : "<<pAccount[i]->GetName()<<endl;
			cout<<"출금할 금액 : ";	cin>>min;
			if(pAccount[i]->GetBalance()<min)
			{
				cout<<"잔액이 부족합니다."<<endl;
				cout<<endl;
				return;
			}
			pAccount[i]->MinBalance(min);
			cout<<"잔    액 : "<<pAccount[i]->GetBalance()<<endl;
			cout<<endl;
			return;
		}
	}
	cout<<"잘못된 계좌번호를 입력하셨습니다."<<endl;
	cout<<endl;

}

void AccManager::Inquire()	//잔액조회
{
	cout<<"***** 잔액 조회 *****"<<endl;
	for(int i=0;i<count;i++)
		pAccount[i]->ShowAllData();
	cout<<endl;
}
